///////////////////////////////////////////////////////////
//  Terminal.cs
//  Implementation of the Class Terminal
//  Generated by Enterprise Architect
//  Created on:      24-Aug-2016 11:29:40 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using CIM.IEC61970.Base.Core;
using System.Xml.Serialization;

namespace CIM.IEC61970.Base.Core {
    /// <summary>
    /// An AC electrical connection point to a piece of conducting equipment. Terminals
    /// are connected at physical connection points called connectivity nodes.
    /// </summary>
    [Serializable()]
    public class Terminal : ACDCTerminal {

		/// <summary>
		/// Represents the normal network phasing condition.
		/// If the attribute is missing three phases (ABC or ABCN) shall be assumed.
		/// </summary>
		public PhaseCode phases;
        /// <summary>
        /// The connectivity node to which this terminal connects with zero impedance.
        /// </summary>
        [XmlIgnore]
        public CIM.IEC61970.Base.Core.ConnectivityNode ConnectivityNode;
        /// <summary>
        /// The conducting equipment of the terminal.  Conducting equipment have  terminals
        /// that may be connected to other conducting equipment terminals via connectivity
        /// nodes or topological nodes.
        /// </summary>
        [XmlIgnore]
        public CIM.IEC61970.Base.Core.ConductingEquipment ConductingEquipment;

        public Wires.ACLineSegment ACline;

        public Terminal(){

		}

		~Terminal(){

		}

        public override object Clone()
        {
            return MemberwiseClone();
        }

    }//end Terminal

}//end namespace Core