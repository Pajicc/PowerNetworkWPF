///////////////////////////////////////////////////////////
//  Substation.cs
//  Implementation of the Class Substation
//  Generated by Enterprise Architect
//  Created on:      24-Aug-2016 11:29:40 PM
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using CIM.IEC61970.Base.Core;
using System.Xml.Serialization;

namespace CIM.IEC61970.Base.Core {
    /// <summary>
    /// A collection of equipment for purposes other than generation or utilization,
    /// through which electric energy in bulk is passed for the purposes of switching
    /// or modifying its characteristics.
    /// </summary>
    /// 
    [Serializable()]
    public class Substation : EquipmentContainer
    {

        /// <summary>
        /// The voltage levels within this substation.
        /// </summary>
        /// 

        public List<VoltageLevel> VoltageLevels = new List<VoltageLevel>();

        private int clonedItems = 0;

        public string VoltageLvls
        {
            get
            {
                string temp = String.Empty;
                foreach (VoltageLevel vl in VoltageLevels)
                {
                    temp += vl.BaseVoltage.nominalVoltage.ToString() + " ";
                }
                return temp;
            }

            set
            {

            }
        }
        /// <summary>
        /// Bays contained in the substation.
        /// </summary>
        public List<Bay> Bays;

        public Substation()
        {

        }

        ~Substation()
        {

        }

        public override string ToString()
        {
            StringBuilder builder = new StringBuilder();
            foreach (VoltageLevel level in VoltageLevels) // Loop through all strings
            {
                builder.Append(level).Append("|"); // Append string to StringBuilder
            }
            string result = builder.ToString(); // Get string from StringBuilder

            return name + " (" + result + ")";

        }

        public override object Clone()
        {
            clonedItems += 1;
            Substation copy = new Substation();

            copy.mRID = Guid.NewGuid().ToString();
            copy.name = String.Copy(name) + "Copy" + clonedItems.ToString();

            foreach (VoltageLevel vl in VoltageLevels)
            {
                copy.VoltageLevels.Add(vl);
            }

            foreach (ConnectivityNode node in ConnectivityNodes)
            {
                copy.ConnectivityNodes.Add((ConnectivityNode)node.Clone());
            }

            return copy;
        }

    }//end Substation

}//end namespace Core